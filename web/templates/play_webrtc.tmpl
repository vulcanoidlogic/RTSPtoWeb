<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="x-ua-compatible" content="ie=edge">

  <title>RTSPtoWEB</title>
  <link rel="stylesheet" href="/../static/css/adminlte.min.css">
  <link rel="stylesheet" href="/../static/css/index.css">
</head>

<body>
<div class="content">
  {{template "player_single.tmpl" .}}
</div>
<script>
let streams = {{ .streams }};
</script>
<script src="/../static/plugins/jquery/jquery.min.js"></script>
<script src="/../static/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/../static/js/index.js"></script>
<script>
  let webrtc, webrtcSendChannel;
  let mediaStream;

  $(document).ready(() => {
    startPlay();
  });

  async function startPlay() {
    mediaStream = new MediaStream();
    $("#videoPlayer")[0].srcObject =  mediaStream;
    webrtc = new RTCPeerConnection({
      sdpSemantics: "unified-plan"
    });
    webrtc.onnegotiationneeded = handleNegotiationNeeded;
    webrtc.onsignalingstatechange = signalingstatechange;

    webrtc.ontrack = ontrack
    let offer = await webrtc.createOffer({
            offerToReceiveAudio:false,
            offerToReceiveVideo:true
        });
        await webrtc.setLocalDescription(offer);
  }

  function ontrack (event){
    console.log(event.streams.length + ' track is delivered', new Date());
    mediaStream.addTrack(event.track);
  }

  async function signalingstatechange (){
        switch (webrtc.signalingState){
            case 'have-local-offer':
            let uuid = $('#uuid').val();
            let channel = $('#channel').val();
            let url = "/stream/" + uuid + "/channel/" + channel + "/webrtc?uuid=" + uuid + '&channel=' + channel;
            //let url = "/stream/" + uuid + "/channel/" + channel + "/webrtc?uuid=" + uuid + '&channel=' + channel;
            console.log('url=', url, new Date());
            let data = btoa(webrtc.localDescription.sdp);
            console.log('webrtc.localDescription.sdp btoa complete', new Date());
            $.post(url, {
              data: data
            }, function(data) {
              try {
                console.log('webrtc data received', new Date());
                webrtc.setRemoteDescription(new RTCSessionDescription({
                  type: 'answer',
                  sdp: atob(data)
                }))
              } catch (e) {
                console.warn(e);
              }

            });
                break;
            case 'stable':
                /*
                * There is no ongoing exchange of offer and answer underway.
                * This may mean that the RTCPeerConnection object is new, in which case both the localDescription and remoteDescription are null;
                * it may also mean that negotiation is complete and a connection has been established.
                */
                console.log('webrtc stable', new Date());
                break;

            case 'closed':
                /*
                 * The RTCPeerConnection has been closed.
                 */
                break;

            default:
                console.log(`unhandled signalingState is ${webrtc.signalingState}`);
                break;
        }
    }

  async function handleNegotiationNeeded() {
    let uuid = $('#uuid').val();
    let channel = $('#channel').val();
    let url = "/stream/" + uuid + "/channel/" + channel + "/webrtc?uuid=" + uuid + '&channel=' + channel;
    let offer = await webrtc.createOffer();

    await webrtc.setLocalDescription(offer);
    $.post(url, {
      data: btoa(webrtc.localDescription.sdp)
    }, function(data) {
      try {
        webrtc.setRemoteDescription(new RTCSessionDescription({
          type: 'answer',
          sdp: atob(data)
        }))
      } catch (e) {
        console.warn(e);
      }

    });
  }

//  $("#videoPlayer")[0].addEventListener('loadeddata', () => {
//    $("#videoPlayer")[0].play();
//    makePic();
//  });

  $("#videoPlayer")[0].addEventListener('error', () => {
    console.log('video_error')
  });
</script>
</body>
